---
// Welcome to Astro! Everything between these triple-dash code fences
// is your "component frontmatter". It never runs in the browser.
console.log('This runs in your terminal, not the browser!');

import MainLayout from "../layouts/main-layout.astro";
import {Section} from '../components/Section';
import {HeroText} from '../components/HeroText';
import { WhyUs } from "../components/WhyUs";
import "../styles/global.css";
import { Form } from "../components/Form";
import { SectionIntro } from "../components/SectionIntro";
// import { Reviews } from "../components/Reviews";
import { Circle } from "../components/Circle";
import { SearchIcon, TrustIcon } from "../utils/svgComponents";
// import { BrandCloud } from "../components/BrandCloud";


import heroImage from '/golf-xl.png';
import { Footer } from "../components/Footer";
import { BrandCloud } from "../components/BrandCloud";
import { Button } from "../components/Button";
---

<script>
  // import config from /* preval */ '../../tailwind.config.cjs';
  // const { theme: { extend: { colors: { primary } } } } = config;

  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  const heroScrollAnimation = gsap.timeline({paused: true});
  const aboutScrollAnimation = gsap.timeline({paused: true});
  const contactScrollAnimation = gsap.timeline({paused: true});

  // client:only react elements responsible for their own animation 
  window.addEventListener('load', () => {
    // gsap.delayedCall(1, heroAnimation);

    const heroScope = gsap.utils.selector('.hero');
    const aboutScope = gsap.utils.selector('.about');
    const contactScope = gsap.utils.selector('.contact');
    const cardsScope = gsap.utils.selector('.cards');
    const brandLogos = gsap.utils.selector('.brand-logo');

    const sections = gsap.utils.toArray<HTMLElement>(".section")
      
    sections.forEach(function(section, index){
      console.log(document.querySelector(`.item-${index}`))
      ScrollTrigger.create({
        trigger:section,
        start:"top center",
        end:"bottom center",
        // markers:true,
        animation:gsap
          .to(`.item-${index}`, {
            opacity:1, 
            duration:.2,
            color: "var(--primary)",
          }),
        //if ScrollTrigger isActive = true then play the animation forward via reversed(false)
        onToggle: (self)=> {
          if(self.animation)
            self.animation.reversed(!self.isActive)
        }		
      })
    })

    
    heroScrollAnimation
      .to([
        heroScope('.subtitle'), 
        heroScope('.title'),
        heroScope('.tagline')
      ], { 
        autoAlpha:1, y:0, ease: "ease: back.in(2)", stagger: .12, duration: .8 
      })
      .to('.cta-button', { autoAlpha:1, x:0, ease: "ease: back.out(10)",  duration:.6 }, "<.35")
      .set('.hero-image', { autoAlpha:0, xPercent:5, scale:0.98}, '<')
      .to('.hero-image', {
        autoAlpha: 1,
        ease:'power4.inOut',
        xPercent: 0,
        scale: 1,
        duration: .7
      }, "<.3");

    aboutScrollAnimation
      .to([
        aboutScope('.subtitle'), 
        aboutScope('.title'), 
        aboutScope('.tagline'),
      ], { 
        autoAlpha:1, ease: "ease: back.out(2)", stagger: .12, delay: .3,
      })
   
    
    cardsScope('.card').forEach((card, index) => {
      const distance = index % 2 === 0 ? 10:-10;
      const tl = gsap.timeline({paused:true}).from(card, {
        autoAlpha: 0,
        xPercent: gsap.utils.wrap([-distance, distance, -distance]),
        ease:'power4.inOut',
        duration: .7
      }).from(brandLogos, { opacity: 0, stagger: .2 });

      ScrollTrigger.create({
        trigger: card,
        start: "top 50%",
        // markers:true,
        onEnter: () => tl.play()
      });
      ScrollTrigger.create({
        trigger: card,
        start: "top 110%",
        // markers:true,
        onLeaveBack: () => tl.pause(0)
      });
    });

    contactScrollAnimation
    .to([
        contactScope('.subtitle'), 
        contactScope('.title'),
        contactScope('.tagline'),
      ], { 
        autoAlpha:1, y:0, ease: "back.in(2)", stagger: .12, duration: .8 
      })

    ScrollTrigger.create({
      trigger: ".hero",
      start: "10% top",
      end: "90% bottom",
      // markers:true,
      // onEnterBack: () => heroScrollAnimation.play(0)
    });

    ScrollTrigger.create({
      trigger: ".hero",
      start: "top 20%",
      end: "90% 20%",
      // markers:true,
      onEnter: () => {
        // if(!text) return;
        // text.innerText = 'onEnter';
        heroScrollAnimation.play(0);
      },
      onLeave: () => {
        // if(!text) return;
        // text.innerText = 'onLeave';
        // heroScrollAnimation.pause(0);
      },
      onLeaveBack: () => {
        // if(!text) return;
        // text.innerText = 'onLeaveBack';
      },
    });

    ScrollTrigger.create({
      trigger: ".about",
      start: "top 80%",
      end: "90% top",
      // markers:true,
      onEnter: () => { 
        // if(!text) return;
        // text.innerText = 'onEnter';
        aboutScrollAnimation.play(0);
      },
      onEnterBack: () => {
        // aboutScrollAnimation.play(0)
      }
    });

    // ScrollTrigger.create({
    //   trigger: ".about",
    //   start: "top 90%",
    //   end: "90% top",
    //   markers:true,
    //   onLeave: () => {
    //     // if(!text) return;
    //     // text.innerText = 'onLeave';
    //     aboutScrollAnimation.pause(0);
    //   }
    // });

    ScrollTrigger.create({
      trigger: ".contact",
      start: "top 80%",
      end: "90% top",
      // markers:true,
      onEnter: () => { 
        contactScrollAnimation.play(0);
      },
      onEnterBack: () => {
        // aboutScrollAnimation.play(0)
      }
    });
    

    // function heroAnimation() {
    //   const heroText = document.querySelectorAll('.hero .animate-text');
    //   gsap.timeline({})
    //     .set(heroText, { y:-8 })
    //     .set('.hero .animate-up', { x:40, scale:.95 })
    //     .to(heroText, { autoAlpha:1, y:0, ease: "ease: back.out(2)", stagger: .2, duration: .6})
    //     .to('.hero .animate-up', { autoAlpha:1, x:0, ease: "ease: back.out(10)", scale:1, duration:.6 }, "<.48");
    // }
  });

 
//   const items = gsap.utils.toArray<HTMLElement>(".animate");
// console.log("items",items);
//   const tl = gsap.timeline();
//     tl.from(items, {
//         autoAlpha: 0,
//         x: -20,
//         // scale: 0.988,
//         stagger: {
//           amount: .8,
//           ease: "slow(0.7, 0.7, false)"    
//         }
//       }, '<-.2');
    
    // // Separate scrolltrigger objects allow leaveback and onenter trigger points to be different
    // ScrollTrigger.create({
    //   trigger: ".animate",
    //   start: "top 80%",
    //   markers:true,
    //   onEnter: () => tl.play()
    // });
    // ScrollTrigger.create({
    //   trigger: ".animate",
    //   start: "top 110%",
    //   markers:true,
    //   onLeaveBack: () => tl.pause(0)
    // });
    
        // const menuItems = Array.from(document.querySelectorAll('.menu__item'));
        // const sectionsMap = new Map();

        // sections.forEach((section, index) => sectionsMap.set(section, menuItems[index]));

        // this._sectionTriggers = sections.map((section, i) => {
        //     const scrollTrigger = ScrollTrigger.create({
        //         trigger: section,
        //         start: "top center",
        //         onEnter: () => this._Header.setActiveItem(sectionsMap.get(sections[i])),
        //         onLeaveBack: () => this._Header.setActiveItem(sectionsMap.get(sections[i - 1])),
        //     });
        //     return scrollTrigger;
        // });

  // import { gsap } from "gsap";
  // import { ScrollTrigger } from "gsap/ScrollTrigger";

  // gsap.registerPlugin(ScrollTrigger);

  // const sections = gsap.utils.toArray<HTMLElement>(".section");
  // sections.forEach((panel) => {
  //   ScrollTrigger.create({
  //     scroller: "main",
  //     trigger: panel,
  //     snap: 1 / (sections.length - 1),
  //     start: "top top", 
  //     pin: true, 
  //     pinSpacing:false,
  //     // markers: true
  //   });
  // });
</script>
              <!-- <Circle className=""/> -->

          <!-- <TrustIcon className="s-v:hidden sm:row-start-15 col-start-1 h-16 w-36 p-1 z-20" /> -->
<MainLayout title="Vehicle Sourcing/Purchasing/Cover" classes="relative font-inter mt-headerHeight overflow-hidden">
      <!-- <div class="scroll-text fixed top-50 left-10 text-red-600 z-10"></div> -->

      <Section className="hero section relative justify-center px-page-xs bg-gradient-to-tl from-slate-300 to-slate-50 z-10" height="full" contentClassName="xl:max-w-8xl">


        <div class="  w-full grid grid-rows-16 grid-cols-16 ">
          <HeroText className=" hero-text animate-down col-start-1 col-span-16 row-start-1 md:row-start-2 lg:row-start-3 row-span-9 justify-center md:justify-start z-30 flex flex-col" />
    
          <div class=" hero-image animate-up invisible opacity-0 col-start-1 col-span-16 row-start-10 sm:row-start-9 md:row-start-9 lg:row-start-8 xl:row-start-7 row-span-7 md:row-span-9 xl:row-span-10 justify-self-end flex sm:justify-end items-center">
            <img src={heroImage} class="object-contain max-h-full -scale-x-100  hover:scale-both-110 z-20" alt="Three BMW cars" />
            <Circle className="absolute bottom-0 right-0 w-[190%] translate-x-1/2 translate-y-1/2 rotate-12 xl:rotate-45 z-10"/>
            <Circle className="absolute bottom-0 right-0 w-[190%] translate-x-1/2 translate-y-1/2 rotate-12 xl:rotate-45 scale-[.90] z-10"/>
          </div>
        </div>

      </Section>

      <Section className="py-3 about section relative items-center  px-page-xs bg-gradient-to-bl from-slate-300 to-slate-50"   breakout={true} contentClassName="">
        <div class=" w-full grid grid-cols-16 lg:grid-rows-16 gap-y-10 sm:gap-y-20 lg:gap-0">
          <SectionIntro 
            title="How It Works"
            titleClasses="invisible opacity-0"
            subtitle="3 Easy Steps"
            subtitleClasses="subtitle invisible opacity-0",
            tagline="Lorem ipsum dolor sit amet, consectetur adipisicing elit. Officiis, consequuntur!"
            className=" xl:max-w-8xl xl:mx-auto flex flex-col justify-start col-start-1 col-span-16 lg:row-start-1 lg:row-span-2"
            taglineClasses="invisible opacity-0"
          />
          <div class="  lg:row-start-4 lg:row-span-11 col-span-full z-30">
            <WhyUs className="" />
          </div>

          <div class=" w-full xl:max-w-8xl xl:mx-auto flex flex-col justify-start items-start col-start-1 col-span-16 lg:row-start-15 lg:row-span-2">
            <Button   
              className="cta-button invisible opacity-0"
              rounded
              intent="dark"   
              variant="outline"
              size="md"
            >
              <SearchIcon className="h-6 w-6 lg:row-start-17 flex-none" />
              <span class="ml-3.5">Contact Us</span>
            </Button>
          </div>
        </div>
      </Section>
    
    
      <Section className="contact section relative flex flex-col justify-center bg-gradient-to-tl from-slate-300 to-slate-50  px-page-xs " client:visible>

        <div class=" w-full grid grid-cols-16 lg:grid-rows-16 gap-y-10 lg:gap-0">
          <SectionIntro 
            title="Find the Perfect Car"
            titleClasses="invisible opacity-0"
            subtitle="Contact Us Today"
            subtitleClasses="subtitle invisible opacity-0"
            className="xl:max-w-8xl xl:mx-auto flex flex-col justify-start col-start-1 col-span-16 lg:row-start-1 lg:row-span-2 "
            tagline="Let our team know what you're looking for and we'll get right on it!"
            taglineClasses="invisible opacity-0"
          />   

          <BrandCloud className="col-start-1 col-span-16" />

          <div class="col-start-1 col-span-16">
            <!-- client:only react elements responsible for their own animation -->
            <Form className=" " client:only/>
          </div>

        </div>
      </Section>
    
      
      <!-- <Section variant="dark" height="full">
        <SectionIntro 
          title="How It Works"
          subtitle="WAKEY WINES"
          tagline="Buying a car should be something you enjoy"
          variant="dark"
        />  
        <WhyUs className="h-full" client:only />
      </Section>
      <Section height="full">
        <SectionIntro 
          title="Mange Tout Rodders"
          subtitle="ORIGINAL FAKE"
        />    
        <Reviews client:only/>
      </Section> -->
    
      <Section className=" px-header" variant="darker">
        <Footer />
      </Section>
      
</MainLayout>